#+TITLE: The REST API for Lab Data Service Dashboard
#+AUTHOR: VLEAD
#+DATE: [2017-06-05 Mon]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates building of the REST API.

* REST
** Serve index.html
#+NAME: serve_index_html
#+BEGIN_SRC python 
	
@api.route("/", methods=['GET'])
def index():	
	return render_template('index.html')

#+END_SRC

** Login API
   API to login to the application.
*** API Design
  - URL :: /login
  - Method :: GET
  - Success Response ::
    + Code: 200
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/login
    #+END_EXAMPLE
  - Error Response ::
    + Code: 400 - Google OAuth error
    + Code: 401 - HTTP error
*** =Login API=
    When user clicks on =login= button from f/e it will invoke =/login= api and
    thereby it will forward request to =google=. User must sign in using it's 
    google credentials which is then stored in our database.
#+NAME: oauth_session_creation
#+BEGIN_SRC python 

def get_google_auth(state=None, token=None):
    if token:
        return OAuth2Session(Auth.CLIENT_ID, token=token)
    if state:
        return OAuth2Session(
            Auth.CLIENT_ID,
            state=state,
            redirect_uri=Auth.REDIRECT_URI)
    oauth = OAuth2Session(
        Auth.CLIENT_ID,
        redirect_uri=Auth.REDIRECT_URI,
        scope=Auth.SCOPE)
    return oauth
#+END_SRC


#+NAME: login_route
#+BEGIN_SRC python

@api.route('/login', methods=["GET","POST"])
def login():
	if 'user' in login_session: 
		return redirect("/")
	google = get_google_auth()
	auth_url, state = google.authorization_url(
		Auth.AUTH_URI, access_type='offline')
	session['oauth_state'] = state
	return redirect(auth_url, code=200)	
 #+END_SRC
    
*** Google Callback response =API=
    - Once the Google verfies the user credentials it will send callback
      response to =/authorized= api which should be registered at google's
      dashboard as one of Authorized redirect URIs

    - Once google authenticates the user, =userdirectory= application will
      authorize the user to use the application.

#+NAME: callback_google_api
#+BEGIN_SRC python

def get_google_auth(state=None, token=None):
	if token:
		return OAuth2Session(Auth.CLIENT_ID, token=token)
	if state:
		return OAuth2Session(
			Auth.CLIENT_ID,
			state=state,
			redirect_uri=Auth.REDIRECT_URI)

	return OAuth2Session(
		Auth.CLIENT_ID,
		redirect_uri=Auth.REDIRECT_URI,
		scope=Auth.SCOPE)


@api.route('/gCallback')
def callback():
	if 'error' in request.args:
		if request.args.get('error') == 'access_denied':
			return 'You have been denied access.'
		return 'Error encountered.'
	if 'code' not in request.args and 'state' not in request.args:
		return redirect("/")
	else:
		google = get_google_auth(state=session.get('oauth_state'))
		try:
			token = google.fetch_token(
				Auth.TOKEN_URI,
				client_secret=Auth.CLIENT_SECRET,
				authorization_response=request.url)
		except:
			return jsonify(success=False, message="HTTP connectivity error"), 401

		google = get_google_auth(token=token)
		resp = google.get(Auth.USER_INFO)
		data = resp.json()
		if resp.status_code == 200:
			try:
				next = resp.args.get('next')
			except:
				next='/'

			login_session['google_token'] = token
			session['user'] =data
			return redirect(next) ,200

		return  jsonify(success=False, message="Couldn't fetch information"), 400
#+END_SRC

*** Google OAuth Credentials
    Google OAuth service required URLs (Credentials) should be specified

#+NAME: google_oauth_configuration
#+BEGIN_SRC python

class Auth:
    CLIENT_ID = "Your client ID"
    CLIENT_SECRET = "Your client secret"
    REDIRECT_URI = 'https://localhost:5000/gCallback'
    AUTH_URI = 'https://accounts.google.com/o/oauth2/auth'
    TOKEN_URI = 'https://accounts.google.com/o/oauth2/token'
    USER_INFO = 'https://www.googleapis.com/userinfo/v2/me'
    SCOPE = ['https://www.googleapis.com/auth/userinfo.profile', 'https://www.googleapis.com/auth/userinfo.email']

#+END_SRC
 
** Logout API
   When user clicks on =logout= button from front end dashboard it will invoke
   =/logout= api and thereby it will destroy all session variables.

*** API Design

  - URL :: /logout
  - Method :: GET
  - URL Params ::  None
  - Success Response ::
    + Code: 200
  - Error Response ::
    + Code: 400 - No user in session
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/logout
    #+END_EXAMPLE

*** Implementation

#+NAME: logout_route
#+BEGIN_SRC python

@api.route('/logout', methods=["GET"])
def logout():
	if 'user' in login_session :
		try:
			login_session.clear()
			session.clear()
		except:
			return jsonify(success=False, message="No session present"), 400

	return redirect("/")


#+END_SRC

** Logged In
 API to return current session state.
*** API Design
   - URL :: /check_login
   - Method :: GET
   - Success Response ::
    + Code: 200
   - Error Response ::
    + Code: 400 
*** Implemenation
#+NAME: logged_in
#+BEGIN_SRC python
@api.route('/check_login',methods=["GET"])
def check_login():
	if request.method=="GET":
		if 'user' in login_session:		
			return jsonify(loggedIn=True,data=login_session['user'])
		else:	
			return jsonify(loggedIn=False)
	return  jsonify(loggedIn=True)

#+END_SRC
    
* Infra                                                         :boilerplate:

  
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from flask import Blueprint, Flask, url_for, redirect, \
	render_template, session, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from requests.exceptions import HTTPError
from requests_oauthlib import OAuth2Session
from runtime.config.goauth_config import Auth
from runtime.rest.app import app, db,require_login
from runtime.rest.app.users.db import User
import os
import json
import re
import time
from sqlalchemy.exc import IntegrityError
from werkzeug.security import gen_salt

api = Blueprint('users', __name__)
login_session={};
#+end_src
    
    


*** Init File
#+NAME: init_file
#+BEGIN_SRC python :tangle app/users/__init__.py
print("App/users")
#+END_SRC
* Tangle                                                        :boilerplate:
  
** sources
#+BEGIN_SRC python :tangle app/users/api.py :eval no :noweb yes
<<imports_for_sources>>
<<oauth_session_creation>>
<<serve_index_html>>
<<login_route>>	
<<callback_google_api>>
<<logout_route>>
<<logged_in>>
<<add_user>>
<<add_role>>
<<show_users>>
<<show_roles>>
<<delete_user>>
<<delete_role>>
<<update_user>>
<<update_profile>>
#+END_SRC
   


   

#+TITLE: Securing of Micro-Services
#+AUTHOR: Projit Bandyopadhyay
#+DATE: [2017-06-08 Thursday]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil



* Authentication vs Authorization

=Authentication=: Process by which we confirm that a party is who he/she says
he/she is.

=Authorization=: The mechanism by which we map from a principal to the action we
are allowing him/her to do.

* Single Sign-on Implementations
- SAML is the reigning implementation

=Identity Provider=: Holds user information. 
1) Authentication is done with identity provider(can be more complex
   authentication mechanisms).
2) Once the provider is satisfied, it sends information to the service
   provider.

- Google uses OpenID Connect. OpenID lacks number of identity providers.
- For a public-facing website, you might be OK using Google as your provider,
  but for internal systems or systems where you want more control over and
  visibility into how and where your data is installed, you’ll want your own
  in-house identity provider.

* Single Sign on Gateway

- Have a gateway act as a proxy between the outside world and your
  services. (instead of having each service handshake with the identity
  provider)

[[https://drive.google.com/open?id=0B4yIMMwkgfVYdkU5dUw5OXFXZkU][Gateway]]

** Disadvantages
- How downstream services receive user information(populate headers?)
(Look at Shibboleth)
- Gateway should be implemented alongside other security measures.

* Fine Grained Authorization
- Favor Coarse grained roles to Fine grained ones for maintainability.
 
* Service to Service Authentication and Authorization
** Trust Inside Perimeter
- Dependent on Sensitivity of data
- Very Common (requests run over https)
*** Disadvantages
- If attacker penetrates network, no protection against man-in-middle attacks

** OpenID
Can use OpenID Connect for service-service interactions as well.

* Certificates
- Can confirm identity of client in TLS. Server can give strong guarantees.
** Operational Challenges
- Issuing Certificates and managing them
- Certificate acceptance intricacies. 
- Revoking Certificates

* Alternative to https: HMAC over HTTP...hash based messaging code
- Based on Amazon AWS and parts of Oauth specification
- With HMAC the body request along with a private key is hashed, and the
resulting hash is sent along with the request. The server then uses its own
copy of the private key and the request body to re-create the hash.
- Cannot be tampered with, or else the hash will be disturbed.
- Lower overheads than https
** Disadvantages
- Sharing the key. And making sure it can be revoked at a later stage.
- Many different implementations as this is not a standard.

* API keys
- API keys allow a service to identify who is making a call, and place limits
  on what they can do.
- Can be implemented with a single key or a more HMAC kind of approach
- Keys are managed centrally(normally)
- Simpler and more straightforward than SAML handshake.
* Deputy Problem
- There is a type of vulnerability called the confused deputy problem, which in
the con‐ text of service-to-service communication refers to a situation where a
malicious party can trick a deputy service into making calls to a downstream
service on his behalf that he shouldn’t be able to. For example, as a customer,
when I log in to the online shopping system, I can see my account details. What
if I could trick the online shop‐ ping UI into making a request for someone
else’s details, maybe by making a call with my logged-in credentials?
- We could route requests directly from the UI to the order service and allow it to vali‐
date the request, but then we hit the various downsides we discussed in Chapter 4.
* Securing Data at REST
- For encryption at rest, unless you have a very good reason for picking something else,
pick a well-known implementation of AES-128 or AES-256 for your platform.
- Use salted password hashing

* Key storage
- Implemented by some databases
- AVOID implementing own.

* Encryption
- Encrypt data as soon as received.
- Decrypt on demand.
- keep encrypted backups of the encrypted data

* Other systems
- Firewalls
- Good logging of data
- IDS systems(intrusion detection systems)
- Network Segregation

* Human Element
- Have systems in place to revoke access to people who leave the organization.
- Ways to detect malicious users inside the organization.

* testing
- Don't write own crypto
- Do security tests and get external verification if possible.

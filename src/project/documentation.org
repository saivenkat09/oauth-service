#+TITLE: Documentation Currently Oauth Serivce
#+AUTHOR: Projit Bandyopadhyay
#+DATE: [2017-06-08 Thursday]
#+SETUPFILE: ../org-templates/level-1.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Documentation

** Resources

- Oauth Documentation: https://oauth.net/2/

- Oauth implementation http://www.swisspush.org/security/2016/10/17/oauth2-in-depth-introduction-for-enterprises

- Example Test http://www.hascode.com/2016/03/setting-up-an-oauth2-authorization-server-and-resource-provider-with-spring-boot/

- Flask way http://flask-oauthlib.readthedocs.io/en/latest/oauth2.html

- Django http://oauthlib.readthedocs.io/en/latest/oauth2/server.html

- Consolidated Java Implementations
https://stackoverflow.com/questions/10296681/is-there-an-oauth-2-0-provider-implementation-in-java-not-oauth-client

- Django Good Implementation
  https://django-oauth-toolkit.readthedocs.io/en/latest/tutorial/tutorial_01.html

- Node https://github.com/jaredhanson/oauth2orize

  
** Explanation
[[../design/diagrams/abstract_flow.png][Flow of Information]]

4 Components : 

*** Resource Owner

- This is the User. The user wants to interact with the client(application)

*** Client

- Client is the Application that wants access to the user's account. Before it
  receives access, the user must authorize it to do so.

*** Resource / Authorization Server

- Protects the User's data and verifies the authenticity of the user. It then
  issues access tokens to the client.




* Other Possibilities
https://github.com/jaredhanson/oauth2orize


* References
- To create Sign in + Registration
https://simpleisbetterthancomplex.com/tutorial/2017/02/18/how-to-create-user-sign-up-view.html

id = hhsBocuFl7EGCCU9zHLmHppTkdpQI5HwfITMCJld
secret = dAilKMAig6F22zaSVOyyyMVQANjGWRseO6fAgobteJN3Q5Op2VQTLbr8x9SvZUGt3n9MuwpUxiCKJov7rnwtWV58rm7cVpANLJtdyUhYmM8VRY2Sc71MhU1KxuubD9wZ


* Oauth Info

** Client
- Needs to register with the authorization server
*** Registration
- Needs to provide what type of client(Confidential or Public section 2.1 of
  oauth documentation) and redirect URIs(and any additional info like: (e.g.,
  application name, website, description, logo image, the acceptance of legal
  terms).).
- Needs some form of authentication with the auth server. may have a client
  password or some form of public/private key security measure. The degree of
  security is to be determined by the needs of the auth server.
** Protocol Endpoints
*** Authorization Endpoint
- Where the resource is interacted with to get authorization grant.
- Auth server must use TLS for transmission to auth endpoint
*** Redirection Endpoint
- Must be an absolute URI
** Authorization Flow
     +----------+
     | Resource |
     |   Owner  |
     |          |
     +----------+
          ^
          |
         (B)
     +----|-----+          Client Identifier      +---------------+
     |         -+----(A)-- & Redirection URI ---->|               |
     |  User-   |                                 | Authorization |
     |  Agent  -+----(B)-- User authenticates --->|     Server    |
     |          |                                 |               |
     |         -+----(C)-- Authorization Code ---<|               |
     +-|----|---+                                 +---------------+
       |    |                                         ^      v
      (A)  (C)                                        |      |
       |    |                                         |      |
       ^    v                                         |      |
     +---------+                                      |      |
     |         |>---(D)-- Authorization Code ---------'      |
     |  Client |          & Redirection URI                  |
     |         |                                             |
     |         |<---(E)----- Access Token -------------------'
     +---------+       (w/ Optional Refresh Token)
  (A)  The client initiates the flow by directing the resource owner's
        user-agent to the authorization endpoint.  The client includes
        its client identifier, requested scope, local state, and a
        redirection URI to which the authorization server will send the
        user-agent back once access is granted (or denied).

   (B)  The authorization server authenticates the resource owner (via
        the user-agent) and establishes whether the resource owner
        grants or denies the client's access request.

   (C)  Assuming the resource owner grants access, the authorization
        server redirects the user-agent back to the client using the
        redirection URI provided earlier (in the request or during
        client registration).  The redirection URI includes an
        authorization code and any local state provided by the client
        earlier.

   (D)  The client requests an access token from the authorization
        server's token endpoint by including the authorization code
        received in the previous step.  When making the request, the
        client authenticates with the authorization server.  The client
        includes the redirection URI used to obtain the authorization
        code for verification.

   (E)  The authorization server authenticates the client, validates the
        authorization code, and ensures that the redirection URI
        received matches the URI used to redirect the client in
        step (C).  If valid, the authorization server responds back with
        an access token and, optionally, a refresh token.



* gitlab is open source, find the authentication and authorization component.

yAlY8DTt0QNP3eCZGgF2SezLONsoyPZW6YzmCjS5

tUaAnMt4RxJh10pvwWlnbJqFQfzsugjdncIxDE9yQ24wrBcM6I

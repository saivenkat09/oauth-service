#+TITLE: New Documentation of Oauth Service
#+AUTHOR: Shubh
#+DATE: [2017-06-30 Friday]
#+SETUPFILE: ../org-templates/level-1.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil



* Aim 
   We need to build an authentiction server for the VLEAD 


* Steps to make it
  This compries of 3 Steps

** Build an OAuth with Idendity Provider
    For each user we do not want to maintain passwords 
    Instead we want something like login with google,facebook and github
    This would work on very similar to the FIM PreCorp model I have made in Alloy

    [[../../meetings/IDPAuthentication.jpeg]]

*** WorkFlow 
    As decribed by me in the PreCorp model this comprises of 3 Steps

    Send request
    IDP Authentication 
    SP Authentication 
    
    
** Build a Server to Server interaction with Oauth
    
    For Server to Server Authentication we need where there is no user intracting we would have a diffrent design
    [[../../meetings/SSAuthentication.jpeg]]

*** WorkFlow for token based authentication 
    When we are having a server to server we can think of it as Client trying to access a server 
    
   1. Registering the client to our OAuthentication Server 
      Hence we need to assign Client ID and Client Secret (We can use salting and other Algorithms for this using are build-in libraries)
    
   2. EveryTime a new server request is made we will first send his clint ID and Query to the OAuth Server to check whether the Server belongs in the database
     
   3.1 If the server is not verified then no access is allowed
   
   3.2 If the server is verified it passes a token which can be hashed
   using public key private key pair / HA256 algo (this will we over
   HTTPS transaction which already has encription followed by a Same Origin Policy)

   4. These token can be transfered using JWT from OAuth to Client and also from Client to Server 

   5. Hence for each request the server checks whether its a valid request and then carries on the request. 

   Disadvantage:
      
   1. To many requests to the Oauth Server per Query 

*** WorkFlow for session based authentication 
    When we are having a server to server we can think of it as Client trying to access a server 
    
   1. Registering the client to our OAuthentication Server 
      Hence we need to assign Client ID and Client Secret (We can use salting and other Algorithms for this using are build-in libraries)
    
   2. EveryTime a new server request is made we will first send his clint ID and Query to the OAuth Server to check whether the Server belongs in the database
     
   3.1 If the server is not verified then no access is allowed and the server can  redirected to the login page (if a user is logged in)
   
   3.2 If the server is verified it passes a token which can be hashed
   using public key private key pair / HA256 algo (this will we over
   HTTPS transaction which already has encription followed by a Same Origin Policy)

   4. Now using this token we make a handshake request from client to the server 

   5. Now the server keeps record of the Client that he is in session and allows him to carry out operation for the while 
      
   6. the token will expire after a period of time 

   7. Hence for each request the server checks whether its a valid request and then carries on the request. 

 
   
** Build a single session on using the previous 2 methods and intergrate them 


* Issues
**  Understanding of these hashing algorithm is needed 
**  Which framework/language should be user
*** Nodejs with mongo db 
*** Python using oauthlib library and sql 

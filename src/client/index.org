#+TITLE: Deploying the Client Server application
#+AUTHOR: Shubh
#+DATE: [2017-06-05 Mon]
#+SETUPFILE: ../org-templates/level-1.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  This document will illustrate working of small example of VLEAD microservice, client server for the Oauth.

* Implementation 
  The client server is a small server with login and logout routes.These routes redirect the client server to the oauth service.

#+BEGIN_SRC python :eval no :tangle client.py
from flask import Flask, redirect, url_for, session, request, jsonify, abort,render_template
import requests	
from flask_cas import CAS
from flask_cas import login_required


app = Flask(__name__)
cas = CAS(app, '/cas')
app.secret_key = "devel"
app.config['CAS_SERVER'] = 'https://localhost:8443/cas' 
app.config['CAS_AFTER_LOGIN'] = 'route_root'


@app.route('/')
@login_required
def route_root():
	return render_template('index.html',
		username = cas.username,
		display_name = cas.attributes)

if __name__ == "__main__":
	app.run(host='localhost',port=5000,debug=True,ssl_context = ('./ssl.crt', './ssl.key'))
#+END_SRC

* SSL Certifactes
  To our service more secure we use https and not http protocol.
  To get the certificates run =python cert.py= in the client server directory in the build

#+BEGIN_SRC python :eval no :tangle cert.py
from werkzeug.serving import make_ssl_devcert
make_ssl_devcert('./ssl', host='localhost')
#+END_SRC

* Frontend
  This code shows the simple front html of our client server which will be rendered by the server using jinja.
  When the user is logged out, it displays a login button
  When the user is logged in, it displays the credentials of the user
#+BEGIN_SRC python :tangle templates/index.html :eval no 
<!DOCTYPE html>
<html lang="en">
<head>
	<title>Login Page</title>
	<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0"/>

	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.99.0/css/materialize.min.css">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.99.0/js/materialize.min.js"></script>

</head>

<body id="body">
<header>
</header>
	<main>
		<div class="container">
			<div class="row">
				<h3>Welcome to the VLEAD Service</h3>				
			</div>
			<div class="row">
			{% if username %}	
				<div class="col m4">
					<h5 class="card-title">Name: {{ username }} </h5>			
					<a class="btn" href="/cas/logout"> Logout </a>
				</div>
			{% else %}
				<div class="col m6 card">
					<a class="btn btn-danger" href="cas/login"> Login </a>	
				</div>
			{% endif %}
			</div>
		</div>
	</main>

<footer>		
</footer>
</body>
</html>
#+END_SRC

* Debugging Parsing error or ssl context error 
  1.The Flask-CAS package can give errors like: SSL is not verified by
  urlopen 
  2.If no proxy conditions have to be set in urlopen as
  cas-server and the service are inside proxy

  Hence it is recommended to replace files
  python2.7 -> /usr/local/lib/python2.7/dist-packages/flask_cas/routing.py
  pyhton3.5 -> /usr/local/lib/python3.5/dist-packages/flask_cas/routing.py
  
  with the routing.py file tangled in this directory


#+BEGIN_SRC :eval no :tangle routing.py
import flask
from xmltodict import parse
from flask import current_app
from .cas_urls import create_cas_login_url
from .cas_urls import create_cas_logout_url
from .cas_urls import create_cas_validate_url
from collections import OrderedDict
import ssl

try:
    from urllib import urlopen
except ImportError:
    from urllib.request import urlopen

blueprint = flask.Blueprint('cas', __name__)


@blueprint.route('/login/')
def login():
    """
    This route has two purposes. First, it is used by the user
    to login. Second, it is used by the CAS to respond with the
    `ticket` after the user logs in successfully.

    When the user accesses this url, they are redirected to the CAS
    to login. If the login was successful, the CAS will respond to this
    route with the ticket in the url. The ticket is then validated.
    If validation was successful the logged in username is saved in
    the user's session under the key `CAS_USERNAME_SESSION_KEY` and
    the user's attributes are saved under the key
    'CAS_USERNAME_ATTRIBUTE_KEY'
    """

    cas_token_session_key = current_app.config['CAS_TOKEN_SESSION_KEY']

    redirect_url = create_cas_login_url(
        current_app.config['CAS_SERVER'],
        current_app.config['CAS_LOGIN_ROUTE'],
        flask.url_for('.login', _external=True))

    if 'ticket' in flask.request.args:
        flask.session[cas_token_session_key] = flask.request.args['ticket']

    if cas_token_session_key in flask.session:

        if validate(flask.session[cas_token_session_key]):
            if 'CAS_AFTER_LOGIN_SESSION_URL' in flask.session:
                redirect_url = flask.session.pop('CAS_AFTER_LOGIN_SESSION_URL')
            else:
                redirect_url = flask.url_for(
                    current_app.config['CAS_AFTER_LOGIN'])
        else:
            del flask.session[cas_token_session_key]

    current_app.logger.debug('Redirecting to: {0}'.format(redirect_url))

    return flask.redirect(redirect_url)


@blueprint.route('/logout/')
def logout():
    """
    When the user accesses this route they are logged out.
    """

    cas_username_session_key = current_app.config['CAS_USERNAME_SESSION_KEY']
    cas_attributes_session_key = current_app.config['CAS_ATTRIBUTES_SESSION_KEY']

    if cas_username_session_key in flask.session:
        del flask.session[cas_username_session_key]

    if cas_attributes_session_key in flask.session:
        del flask.session[cas_attributes_session_key]

    if(current_app.config['CAS_AFTER_LOGOUT'] != None):
        redirect_url = create_cas_logout_url(
            current_app.config['CAS_SERVER'],
            current_app.config['CAS_LOGOUT_ROUTE'],
            current_app.config['CAS_AFTER_LOGOUT'])
    else:
        redirect_url = create_cas_logout_url(
            current_app.config['CAS_SERVER'],
            current_app.config['CAS_LOGOUT_ROUTE'])

    current_app.logger.debug('Redirecting to: {0}'.format(redirect_url))
    return flask.redirect(redirect_url)


def validate(ticket):
    """
    Will attempt to validate the ticket. If validation fails, then False
    is returned. If validation is successful, then True is returned
    and the validated username is saved in the session under the
    key `CAS_USERNAME_SESSION_KEY` while tha validated attributes dictionary
    is saved under the key 'CAS_ATTRIBUTES_SESSION_KEY'.
    """

    cas_username_session_key = current_app.config['CAS_USERNAME_SESSION_KEY']
    cas_attributes_session_key = current_app.config['CAS_ATTRIBUTES_SESSION_KEY']

    current_app.logger.debug("validating token {0}".format(ticket))

    cas_validate_url = create_cas_validate_url(
        current_app.config['CAS_SERVER'],
        current_app.config['CAS_VALIDATE_ROUTE'],
        flask.url_for('.login', _external=True),
        ticket)

    current_app.logger.debug("Making GET request to {0}".format(
        cas_validate_url))

    xml_from_dict = {}
    isValid = False

    try:
        context = ssl._create_unverified_context()
        xmldump = urlopen(cas_validate_url, context=context,proxies={}).read().strip().decode('utf8', 'ignore')
        print(xmldump)
        xml_from_dict = parse(xmldump)
        isValid = True if "cas:authenticationSuccess" in xml_from_dict["cas:serviceResponse"] else False
    except ValueError:
        current_app.logger.error("CAS returned unexpected result")

    if isValid:
        current_app.logger.debug("valid")
        xml_from_dict = xml_from_dict["cas:serviceResponse"]["cas:authenticationSuccess"]
        username = xml_from_dict["cas:user"]
        attributes = xml_from_dict.get("cas:attributes",{})
        if attributes is None:
            attributes = {}


        if "cas:memberOf" in attributes:
            attributes["cas:memberOf"] = attributes["cas:memberOf"].lstrip('[').rstrip(']').split(',')
            for group_number in range(0, len(attributes['cas:memberOf'])):
                attributes['cas:memberOf'][group_number] = attributes['cas:memberOf'][group_number].lstrip(' ').rstrip(' ')

        flask.session[cas_username_session_key] = username
        flask.session[cas_attributes_session_key] = attributes
    else:
        current_app.logger.debug("invalid")

    return isValid
#+END_SRC

  

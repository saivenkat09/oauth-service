#+TITLE: Backend for Lab Data Service Dashboard
#+AUTHOR: VLEAD
#+DATE: [2017-06-05 Mon]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates the backend of users and roles for the LDS Dashboard.
* Models
** Client
   This is the model of =Client=.
   The all the microservices registered.
#+NAME: client-model
#+BEGIN_SRC python 

class Client(db.Model):
	__tablename__="client"

	name = db.Column(db.String(255),nullable=False)
	client_id = db.Column(db.String(40), primary_key=True,unique=True)
	client_secret = db.Column(db.String(55), nullable=False,unique=True)
	user_id = db.Column(db.ForeignKey('user.id'),nullable=False)

	_redirect_uris = db.Column(db.Text)
	_default_scopes = db.Column(db.Text)

	@property
	def client_type(self):
		return 'public'

	@property
	def redirect_uris(self):
		if self._redirect_uris:
			return self._redirect_uris.split()
		return []

	@property
	def default_redirect_uri(self):
		return self.redirect_uris[0]

	@property
	def default_scopes(self):
		if self._default_scopes:
			return self._default_scopes.split()
		return []		

#+END_SRC
** User
   This is the model of =User=.
   The User table stores the list of all users. It has 3 Columns, 
=id= of type Integer, =email= of type string and  =name= of type string.
#+NAME: user-model
#+BEGIN_SRC python

class User(db.Model, UserMixin):
	__tablename__ = "user"
	id = db.Column(db.Integer, autoincrement=True, primary_key=True)
	name = db.Column(db.String(255),nullable=False)    
	email = db.Column(db.String(255), unique=True, nullable=False)

	def __repr__(self):
		return 'User\'s Id is: %d, User\'s Name is: %r & User\'s Email is: %r>' %(self.id, self.name, self.email)

	def to_dict(self):
		return {
			'id' : self.id,
			'name': self.name,
			'email': self.email,
			'role': self.role
		}

#+END_SRC


* Infra
** sources
*** Imports
#+NAME: imports_for_sources
#+BEGIN_SRC python
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin
from runtime.rest.app import db
import os
import datetime
#+END_SRC 

* Tangle
** sources
#+BEGIN_SRC python :tangle app/users/db.py :eval no :noweb yes
<<imports_for_sources>>
<<client-model>>
<<user-model>>
#+END_SRC

* Given Starting Reference sites
** Oauth Starting Point
- http://searchmicroservices.techtarget.com/definition/OAuth

** Good Article to refer, HIGHLY Relevant
-https://medium.facilelogin.com/securing-microservices-with-oauth-2-0-jwt-and-xacml-d03770a9a838

** Mobile related
- https://digitalleaves.com/blog/2014/05/building-your-own-rest-api-with-oauth-2-0-i-the-basics/

* Definitions
- authentication - Checking if the person is someone who he really claims to
  be; you do this by providing a username + password.

- authorization - Checking if the person has the right to access some
  resource. This is usually done by giving a token generated by the
  authentication process, or something like that.

* Major methods of Approach
- https://gist.github.com/andineck/0ed33faf686560f71234

- The project as described identifies with Approach 1: creating an independent
  unit that can authorize and authenticate between micro-services (?
)
* Articles to Refer to
** Snippets of Code
- https://medium.com/technology-learning/how-we-solved-authentication-and-authorization-in-our-microservice-architecture-994539d1b6e6

- They used a combination of JWT(user logs in, JWT given. Subsequent requests
  carry the token)

- Permissions are placed in the token

* Analysis So far
** JWT
- We need to use JSON Web Tokens (JWT) to create this service.

- This can be used concurrently with Oauth2.0, which is a security
  framework.(not required to do so though)

- Can put all user information especially permissions in each token, and pass
  the token between services.

*** Advantages 
- Usage of JWT instead will help create a RESTful service(stateless). It would
  remove the use of sessions and the overheads attached.

- JWT are JSON so take up very little space.

- JWT can hold user data and expiry time 

- You can have one authorization server that deals with the Login/Registration
  and generates the token, all the subsequent requests will need not have to go
  to the authorization server as the only the Auth-server will have have the
  private key, and rest of the severs will have the public-key to verify the
  signature.

*** Disadvantages
- Relies on a single key for decryption of data. If the key is compromised the
  only way to resecure the system would be to log all users out and generate a
  new key.

- Data overhead, as the token needs to be passed around.

*** References
- https://float-middle.com/json-web-tokens-jwt-vs-sessions/

* Separate Ideas
- Can we have a JWT for the login session globally rather than pass it around,
  and have a check between each of the microservices. This style of
  implementation would be similar to the use of session. This can be done when
  authorization is user dependent(not dependent on which microservice is making
  a call)

* Architecture Styles
** Bouncer
https://www.appsflyer.com/blog/how-we-solved-authentication-and-authorization-in-our-microservices-architecture/

- This interacts with the user and takes care of auth.

** AuthBearer
  https://hashnode.com/post/best-way-to-perform-authentication-between-microservices-cijyn2b6o00kzco53cr3xcs50

* Implementation 
** Diagram
https://www.slideshare.net/leanIX_net/authorization-and-authentication-in-microservice-environments

** Python
http://blog.apcelent.com/json-web-token-tutorial-with-example-in-python.html

** Example in Node
https://jwt.io/introduction/
* Questions
** Authentication System
- Current Auth System?

- Do we want to have oauth style authentication? Allowing login through other
  accounts essentially. If so, scope of the project needs to be changed.

- Aim is authorization between user and microservice or between 2 microservices.
  
** Implementation
- If we choose to go along with JWT, changes will need to be made to all
  services, not just one. Validation of a key, and information should be pulled
  from the token.







* TODO Requirements
- Authorization between Microservices
- 
